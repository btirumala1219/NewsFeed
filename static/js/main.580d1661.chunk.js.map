{"version":3,"sources":["components/dashbar/dashbar.js","scrapers/sources/hackernews.js","scrapers/wrapper.js","components/home.js","components/newsfeed.js","App.js","serviceWorker.js","index.js"],"names":["Dash","props","state","className","Component","HackerNews","this","getTop","bind","sol","initsol","Promise","resolve","axios","get","then","res","data","catch","err","console","log","i","source","title","url","hotIDs","addy","resolve2","res2","sol1","topposts","setTopTen","topcert","ScrapeWrapper","hcknews","getTen","Home","hackernews","scrapewrapper","get10hackernews","hcknewstop10","setState","getfromhackernews","event","preventDefault","target","elements","heading","map","article","Card","style","width","backgroundColor","Body","Title","Text","href","Button","variant","NewsFeed","self","userAcEmail","signedIn","ReactGA","initialize","App","loggedIn","userEmail","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.580d1661.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Dash extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n\n\n    return (\n      <div>\n\t\t\t\t\t<div className=\"col-12 navBar\">\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"navBarText col-2\">  \n\t\t\t\t\t\t\t\t\tFeed\n\t\t\t\t\t\t\t</div>    \n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default Dash;","\n/**\n *  JSON structure for standardizing stories\n *  {\n *    source: string\n *    title: string\n *    url: string\n *  } \n*/\n\nimport axios from 'axios';\n\nclass HackerNews {\n  constructor(props) {\n    this.getTop = this.getTop.bind(this);\n    this.sol = [];\n    this.initsol();\n  }\n\n  getTop() {\n    return new Promise( function(resolve) {\n    axios\n      .get('https://hacker-news.firebaseio.com/v0/topstories.json')\n      .then(res => { \n        resolve(res.data);\n      })\n      .catch(err => {\n        console.log(\"Error in get accses\" + err);\n      });\n    })\n  }\n\n  initsol(){\n    for(var i = 0; i<10; i++){\n      this.sol[i] = {\n        source: \"HackerNews\",\n        title: \"\",\n        url: \"\"\n      }\n    }\n  }\n\n  test() {\n    console.log(this.state.hotIDs);\n  }\n\n  setTopTen(addy){\n    return new Promise( function(resolve2) {\n      axios\n      .get('https://hacker-news.firebaseio.com/v0/item/'+addy+'.json')\n      .then(res2 => {\n        resolve2(res2.data);\n      })\n      .catch(err => {\n        console.log(\"Error in get accses\" + err);\n      });\n    })\n  }\n\n  async getTen(){\n      var sol1 = this.sol;\n      //console.log(sol1);\n      var topposts = await this.getTop();\n      //console.log(topposts);\n\n      for(var i = 0; i<10; i++){\n        var topcert = await this.setTopTen(topposts[i]);\n        //console.log(topcert);\n        sol1[i].title = topcert.title;\n        sol1[i].url = topcert.url;\n      }\n      return sol1;\n  }\n}\n\nexport default HackerNews;\n","/**\n *  JSON structure for standardizing stories\n *  {\n *    source: string\n *    title: string\n *    url: string\n *  } \n*/\n\nimport HackerNews from './sources/hackernews';\n\nclass ScrapeWrapper {\n\n    async get10hackernews(){\n        var hcknews = new HackerNews();\n        var sol = await hcknews.getTen();\n        //console.log(sol);\n        return sol;\n    }\n\n}\n\nexport default ScrapeWrapper;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Dash from './dashbar/dashbar';\nimport { Card, Button} from 'react-bootstrap';\nimport '../App.css';\nimport ScrapeWrapper from '../scrapers/wrapper';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hackernews: []\n    };\n  }\n\n  async getfromhackernews() {\n    var scrapewrapper = new ScrapeWrapper();\n    var hcknewstop10 = await scrapewrapper.get10hackernews();\n    this.setState({\n        hackernews: hcknewstop10\n    })\n    //console.log(hcknewstop10);\n  }\n\n  \n  componentDidMount() {\n    this.getfromhackernews();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(event.target.elements);\n  }\n\n\n  render() {\n    const heading = \"Home\";\n    return (\n      <div>\n      <Dash heading={heading} />\n        <div className=\"col-12 span-4\">\n            <div className=\"container\">\n            {this.state.hackernews.map((article) => (\n            <Card style={{ width: '100%', backgroundColor: '#bdd1f0' }}>\n                <Card.Body>\n                    <Card.Title>{article.source}</Card.Title>\n                    <Card.Text>{article.title}\n                    </Card.Text>\n                    <a href={article.url} target=\"_blank\">\n                        <Button variant=\"primary\">Go to article</Button>\n                    </a>\n                </Card.Body>\n            </Card>\n            ))}\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Card, Button} from 'react-bootstrap';\nimport '../App.css';\nimport axios from 'axios';\nimport Dash from './dashbar/dashbar';\nimport ScrapeWrapper from '../scrapers/wrapper';\n\nclass NewsFeed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hackernews: []\n    };\n  }\n\n  async getfromhackernews() {\n    var scrapewrapper = new ScrapeWrapper();\n    var hcknewstop10 = await scrapewrapper.get10hackernews();\n    this.setState({\n        hackernews: hcknewstop10\n    })\n    //console.log(hcknewstop10);\n  }\n\n  componentDidMount() {\n    this.getfromhackernews();\n    var self = this;\n    axios\n    .get('http://3.19.32.4/api/activesession/getactivesession')\n    .then(res => {\n      if(res.data[0].userAcEmail !== ''){\n        self.setState({\n          signedIn: true\n        })\n      }\n    })\n    .catch(err => {\n      console.log(\"Error in get accses\" + err);\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(event.target.elements);\n  }\n\n  render() {\n    const heading = \"News Feed\";\n\n    return (\n      <div>\n        <Dash heading={heading} />\n\n        {this.state.hackernews.map((article) => (\n        <Card style={{ width: '18rem' }}>\n            <Card.Body>\n                <Card.Title>{article.source}</Card.Title>\n                <Card.Text>{article.title}\n                </Card.Text>\n                <a href={article.url} target=\"_blank\">\n                    <Button variant=\"primary\">Go to article</Button>\n                </a>\n            </Card.Body>\n        </Card>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default NewsFeed;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './components/home';\nimport NewsFeed from './components/newsfeed';\nimport ReactGA from 'react-ga';\n\nconst trackingId = \"UA-119878427-2\";\n\nReactGA.initialize(trackingId);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      userEmail: '',\n    };\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Router>\n            <Route exact path='/' component={Home} />\n            <Route path='/feed' component={NewsFeed} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n\n// unregister() to register() below. Note this comes with some pitfalls.\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();"],"sourceRoot":""}